import aiogram.utils.exceptions
from aiogram import types, Dispatcher
from aiogram.dispatcher import FSMContext

from bot.keybords import user_keybords
from .user_states import RouteMR, OneCity

from bot.utils.gpt_api import ask
from bot.utils.geocoder_api import get_city_cords
from bot.utils.wiki_translate import get_pictures

from create_bot import bot
from .constants_text import about_bot, create_route_message, bot_commands


# @dp.message_handler(state=OneCity.city)
async def adding_city(message: types.Message, state: FSMContext):
    if message.text == 'cancel':
        await state.finish()
        await main_menu_loader(message)
        return

    await state.update_data(city=message.text)
    await message.answer('–ó–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è‚ùóÔ∏è –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥–æ–∂–¥–∞—Ç—å –∫–∞–∫–æ–µ-—Ç–æ –≤—Ä–µ–º—è.')
    photo = get_pictures(message.text)

    try:
        await bot.send_photo(chat_id=message.chat.id,
                            photo=photo,
                            caption=ask(f'–†–∞—Å—Å–∫–∞–∂–∏ –Ω–µ–º–Ω–æ–≥–æ –æ –≥–æ—Ä–æ–¥–µ {message.text}'),
                            reply_markup=user_keybords.one_city_keybord)

    except aiogram.utils.exceptions.InvalidHTTPUrlContent:
        await message.answer(ask(f'–†–∞—Å—Å–∫–∞–∂–∏ –Ω–µ–º–Ω–æ–≥–æ –æ –≥–æ—Ä–æ–¥–µ {message.text}'),
                             reply_markup=user_keybords.one_city_keybord)
    await OneCity.next()


# @dp.callback_query_handler(lambda query: query.data == 'attractions', state=OneCity.next_state)
async def next_state_state(callback: types.CallbackQuery, state: FSMContext):
    data_states = await state.get_data()
    await callback.message.answer('<b>–î–û–°–¢–û–ü–†–ò–ú–ï–ß–ê–¢–ï–õ–¨–ù–û–°–¢–ò</b>:\n' +
                                  ask(f'–í—ã–≤–µ–¥–∏ —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π –≥–æ—Ä–æ–¥–∞ {data_states["city"]}'),
                                  parse_mode='HTML')


# @dp.callback_query_handler(lambda query: query.data == 'return_to_main', state=OneCity.next_state)
async def return_to_main_menu_query(callback: types.CallbackQuery, state: FSMContext):
    await state.finish()
    await bot.delete_message(message_id=callback.message.message_id, chat_id=callback.message.chat.id)
    await main_menu_loader(callback.message)
    await callback.answer()


# @dp.callback_query_handler(lambda query: query.data == 'city_history', state=OneCity.next_state)
async def write_city_history(callback: types.CallbackQuery, state: FSMContext):
    data_states = await state.get_data()
    await callback.message.answer(f'<b>–ò—Å—Ç–æ—Ä–∏—è –≥–æ—Ä–æ–¥–∞ {data_states["city"]}</b>\n' +
                                  ask(f'–†–∞—Å—Å–∫–∞–∂–∏ –æ –∏—Å—Ç–æ—Ä–∏–∏ –≥–æ—Ä–æ–¥–∞ {data_states["city"]}'),
                                  parse_mode='HTML')
    await callback.answer()


# @dp.callback_query_handler(lambda query: query.data == 'show_on_maps', state=OneCity.next_state)
async def show_city_on_maps(callback: types.CallbackQuery, state: FSMContext):
    data_states = await state.get_data()
    city_cords = await get_city_cords(data_states["city"])
    await bot.send_location(chat_id=callback.message.chat.id, longitude=city_cords[0], latitude=city_cords[1])
    await callback.answer()


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è 'one_city'
# @dp.callback_query_handler(lambda query: query.data == 'one_city')
async def one_city_query(callback: types.CallbackQuery):
    await callback.message.answer("""üìù–í–≤–µ–¥–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å –≥–æ—Ä–æ–¥ –Ω–∏–∂–µ: 
    ‚ùå–î–ª—è –æ—Ç–º–µ–Ω—ã –¥–µ–π—Å—Ç–≤–∏—è –≤–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ 'cancel'.""")
    await OneCity.city.set()
    await callback.answer()


# @dp.callback_query_handler(lambda query: query.data == 'create_route')
async def create_route_query(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer(create_route_message)
    await RouteMR.adding_cities.set()
    await state.update_data(cities=[])
    await callback.answer()


# @dp.message_handler(state=RouteMR.adding_cities)
async def add_city_to_the_plan(message: types.Message, state: FSMContext):
    if message.text == 'cancel':
        await state.finish()
        await main_menu_loader(message=message)
        return

    state_data = await state.get_data()
    await state.update_data(cities=state_data['cities'] + [message.text])
    state_data = await state.get_data()
    await message.answer(f'–ì–æ—Ä–æ–¥ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω‚úÖ\n–¢–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫ –≥–æ—Ä–æ–¥–æ–≤üåÉ: '
                         f'{" ‚û°Ô∏è ".join([city for city in state_data["cities"]])}\n'
                         f'–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –≤–≤–µ–¥–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π –≥–æ—Ä–æ–¥ –Ω–∏–∂–µüëá',
                         reply_markup=user_keybords.adding_cities_keybord)


# @dp.callback_query_handler(lambda query: query.data == 'adding_cities_end', state=RouteMR.adding_cities)
async def add_transport_to_the_plan(callback: types.CallbackQuery, state: FSMContext):
    state_data = await state.get_data()
    if len(state_data['cities']) >= 2:
        await callback.message.answer('–û—Ç–ª–∏—á–Ω–æ, —Ç–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç –¥–ª—è –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è!',
                                      reply_markup=user_keybords.adding_aim_keybord)
        await RouteMR.transport.set()
    else:
        await callback.message.answer('üîí–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ—Ä–æ–¥–æ–≤ –¥–ª—è –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è!')
    await callback.answer()


# @dp.callback_query_handler(lambda query: query.data in ['transport_car', 'transport_train', 'transport_airplane'],state=RouteMR.transport)
async def add_aim_to_the_plan(callback: types.CallbackQuery, state: FSMContext):
    if callback.data == 'transport_car':
        await state.update_data(transport='–º–∞—à–∏–Ω–∞')
    elif callback.data == 'transport_train':
        await state.update_data(transport='–ø–æ–µ–∑–¥')
    elif callback.data == 'transport_airplane':
        await state.update_data(transport='—Å–∞–º–æ–ª—ë—Ç')

    await callback.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è. –î–ª—è –ø—Ä–æ–ø—É—Å–∫–∞ –Ω–∞–∂–º–∏—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É!',
                                  reply_markup=user_keybords.adding_priority_keybord)
    await RouteMR.aim.set()
    await callback.answer()


# @dp.callback_query_handler(lambda query: query.data in ['travelling_food', 'travelling_attractions', 'travelling_skip'],state=RouteMR.aim)
async def creating_route_query(callback: types.CallbackQuery, state: FSMContext):
    if callback.data == 'travelling_skip':
        await state.update_data(aim='')
    else:
        await state.update_data(aim=callback.data)
    await callback.message.answer('üîë–û—Ç–ª–∏—á–Ω–æ! –ù–∞—á–∏–Ω–∞–µ–º —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ –≤–∞—à–∏–º –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è–º!')

    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –∫ ChatGPT.
    state_data = await state.get_data()
    user_transport = state_data["transport"]
    user_aim = f'–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è - {state_data["aim"]}' if state_data["aim"] else ''
    await callback.answer()
    await callback.message.answer('<b>–ü–ª–∞–Ω –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É</b>‚úÖ' +
                                  ask(f'–°–æ—Å—Ç–∞–≤—å –ø–æ–¥—Ä–æ–±–Ω—ã–π –ø–ª–∞–Ω –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è, —Å–æ—Å—Ç–æ—è—â–∏–π –∏–∑ –≥–æ—Ä–æ–¥–æ–≤ '
                                      f'{", ".join(state_data["cities"])}. '
                                      f'–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç –¥–ª—è –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è - {user_transport}, {user_aim}. –ù–µ –∑–∞–±—É–¥—å –Ω–∞–ø–∏—Å–∞—Ç—å'
                                      f'–∫–∞–∫ –¥–æ–±—Ä–∞—Ç—å—Å—è –∏–∑ –æ–¥–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞ –≤ –¥—Ä—É–≥–æ–π, —É—á–∏—Ç—ã–≤–∞—è –≤—ã—à–µ—Å–∫–∞–∑–∞–Ω–Ω—ã–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç.'),
                                  reply_markup=user_keybords.return_to_main_menu, parse_mode='HTML')
    await RouteMR.do_route.set()


# @dp.callback_query_handler(lambda query: query.data == 'mr_to_main', state=RouteMR.do_route)
async def return_to_main_menu_from_route(callback: types.CallbackQuery, state: FSMContext):
    await main_menu_loader(callback.message)
    await state.finish()
    await callback.answer()

# COMMANDS FUNCTIONS


async def main_menu_loader(message: types.Message):
    await message.answer('<b>–°—Ç–∞—Ä—Ç—É–µ–º‚úÖ</b>!\n–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ —Ñ—É–Ω–∫—Ü–∏–π –Ω–∏–∂–µ!',
                         parse_mode='HTML',
                         reply_markup=user_keybords.start_keybord)


# –ö–æ–º–∞–Ω–¥–∞ '/commands'
# @dp.message_handler(commands=['commands'])
async def commands_command(message: types.Message):
    await message.reply('\n'.join([f'<b>{key}</b>: {bot_commands[key]}' for key in bot_commands]), parse_mode='HTML')


# –ö–æ–º–∞–Ω–¥–∞ '/about'
# @dp.message_handler(commands=['about'])
async def about_command(message: types.Message):
    await message.reply(text=about_bot)


# @dp.message_handler(commands=['start'])
async def start_command(message: types.Message):
    await main_menu_loader(message)



def register_user_handlers_main(dp: Dispatcher) -> None:

    # Standart commands
    dp.register_message_handler(commands_command, commands=['commands'])
    dp.register_message_handler(about_command, commands=['about'])
    dp.register_message_handler(start_command, commands=['start'])

    # Standart Callback Handlers
    dp.register_callback_query_handler(create_route_query, lambda query: query.data == 'create_route')
    dp.register_callback_query_handler(one_city_query, lambda query: query.data == 'one_city')

    # One City States Handlers
    dp.register_message_handler(adding_city, state=OneCity.city)
    dp.register_callback_query_handler(next_state_state, lambda query: query.data == 'attractions',
                                       state=OneCity.next_state)
    dp.register_callback_query_handler(return_to_main_menu_query, lambda query: query.data == 'return_to_main',
                                       state=OneCity.next_state)
    dp.register_callback_query_handler(write_city_history, lambda query: query.data == 'city_history',
                                       state=OneCity.next_state)
    dp.register_callback_query_handler(show_city_on_maps, lambda query: query.data == 'show_on_maps',
                                       state=OneCity.next_state)

    # RouteMR States Handlers
    dp.register_message_handler(add_city_to_the_plan, state=RouteMR.adding_cities)
    dp.register_callback_query_handler(add_transport_to_the_plan, lambda query: query.data == 'adding_cities_end',
                                       state=RouteMR.adding_cities)
    dp.register_callback_query_handler(add_aim_to_the_plan, lambda query: query.data in
                                                     ['transport_car', 'transport_train', 'transport_airplane'],
                                       state=RouteMR.transport)
    dp.register_callback_query_handler(creating_route_query, lambda query: query.data in
                                                     ['travelling_food', 'travelling_attractions', 'travelling_skip'],
                                       state=RouteMR.aim)
    dp.register_callback_query_handler(return_to_main_menu_from_route,
                                       lambda query: query.data == 'mr_to_main', state=RouteMR.do_route)